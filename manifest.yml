type: install
jpsVersion: '1.8.1'
name: Multi-Region Redis Cluster
id: redis-cluster-multiregions
categories:
  - apps/clusters
logo: /images/redis-multiregion-logo.png
description: 
  text: Highly-available and reliable Redis cluster setup with automatic multi-region distribution
  short: Enterprise-grade Redis Cluster with automatic distribution across several regions
baseUrl: https://raw.githubusercontent.com/jelastic-jps/redis-multiregion/master

onBeforeInit: scripts/onBeforeInit.js

globals: 
  password: ${fn.password(10)}

settings:
  main:
    fields:
      - caption: Version
        name: nodeType
        type: list    
        values: 
          - value: redis7
            caption: Redis 7
          - value: redis6
            caption: Redis 6
        default: redis7
      - caption: Environment
        type: envname
        name: envName
        dependsOn: region
        randomName: true
        showFullDomain: false
        required: true
      - type: checkbox
        caption: "Create separate environment group"
        name: envGroupEnabled
        value: true
      - type: radiolist
        caption: Topology
        name: topology
        tooltip: 
          text:  <p style="font-size:18px">Redis cluster topologies for multi-region distribution</p><br>
                   <table  style="width:100%"><td></td><th style="text-align:center">Maximum Performance</th><th></th><th style="text-align:center">Maximum Reliability</th></table>
                   <img width='760' height='380' src='https://raw.githubusercontent.com/jelastic-jps/redis-multiregion/master/images/high-performance-HA-topology-black-bg4.svg?sanitize=true'>  
          tipParams: 
          maxWidth: 785
          minWidth: 400
          dismissDelay: 600000
          hideOnOver: false
        values:
          maxperf: Maximum Performance
          maxrealia: Maximum Reliability
        default: maxrealia
      - caption: Regions
        type: regionlist
        name: regions
        disableInactive: true
        selectFirstAvailable: false
        multiSelect: true
        min: 3
        max: 5
        filter:
          isActive: true
        tooltip: The order of selected regions matters for <b>Maximum Performance</b> topology only. First selected region will host the primary node of cluster, so this region should have the highest performance. Other regions will host the secondary nodes. 3 nodes will be created for each environment.

mixins:
  - mixins/common.yml

actions:
  attachNodeGroups:
    - script: |
        var postgresEnvGroup = 'Database cluster ' + '${settings.envName}';
        var postgresEnvs = '${globals.DBEnvs}';
        var targetEnvGroups = eval('(' + MANIFEST + ')').envGroups;
        if (!Array.isArray(targetEnvGroups)) {
            targetEnvGroupsString = targetEnvGroups.toString();
            targetEnvGroups = [];
            if(targetEnvGroupsString.length != 0) {
                targetEnvGroups.push(targetEnvGroupsString);
            }
        }
        targetEnvGroups.push(postgresEnvGroup);
        var DBEnvs = '${globals.DBEnvs}'.split(',');
        for (var i = 0, n = DBEnvs.length; i < n; i ++) {
            resp = jelastic.env.control.AttachEnvGroup({
              envName  : DBEnvs[i],
              session  : session,
              envGroups: targetEnvGroups
            });
            if (resp.result != 0) { return resp; }
        }
        return { result: 0 }

onInstall:
  - initGlobals
  - setGlobals:
      domain: ${settings.envName}-1.${globals.domain-1}
  - createEnvs
  - script: ${baseUrl}/scripts/getClusterEnvs.js
    envName: ${settings.envName}-1
  - setGlobals:
      DBEnvs: ${response.items.join(,)} 
  - if ('${settings.envGroupEnabled}' == 'true'):
    - attachNodeGroups
  - script: |-
      var onAfterReturn = { setGlobals: {} }, pgsqlEnvs = [], glbs = onAfterReturn.setGlobals;
      var resp = jelastic.env.control.GetEnvInfo('${settings.envName}-1', session);
      var ipCmd = "ip a | grep -A1 venet0 | grep inet | awk '{print $2}'| sed 's|\/[0-9]*||g' | head -n 2|tail -n 1";
      if (resp.result != 0) { return resp; } else { pgsqlEnvs.push(resp.env.shortdomain); }
      for (var i = 0, k = resp.nodes; i < k.length; i++) {
          if (k[i].nodeGroup == 'nosqldb') {
              if( k[i].ismaster ) {
                  glbs["master_id_nosqldb-1"] = k[i].id;
                  glbs["master_address_nosqldb-1"] = k[i].address;
              }
          }
      }
      return { result: 0, onAfterReturn: onAfterReturn };
  - installClusterLogic

startPage: ${nodes.nosqldb.master.url}
success:
  email: /text/success.md?_r=${fn.random}
  text: /text/success.md?_r=${fn.random}
