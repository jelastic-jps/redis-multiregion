actions:
  initGlobals:
    - script: |
        var regions = '${settings.regions}'.split(','),
            envGroups = eval('(' + MANIFEST + ')').envGroups, index,
            onAfterReturn = { setGlobals: {} }, 
            glbs = onAfterReturn.setGlobals,
            resp, domain;
        resp = jelastic.env.control.GetRegions(appid, session);
        if (resp.result != 0) return resp;
        resp = resp.array;
        for (var i = 0, n = regions.length; i < n; i ++) {
          index = i + 1;
          glbs["region-" + index] = regions[i];
          for (var a = 0, b = resp.length; a < b; a++) {
            for (var k = 0, l = resp[a].hardNodeGroups.length; k < l; k++) {
              if (resp[a].hardNodeGroups[k].uniqueName == regions[i])
                glbs["domain-" + index] = resp[a].domain;
            }
          }
          if ('${settings.topology}' == 'maxperf') {
            if (index == 1) {
              glbs["displayName-" + index] = "Redis Cluster Primary";
              glbs["initial_env_master-" + index] = "true";
            } else {
              glbs["displayName-" + index] = "Redis Cluster Secondary " + i;
              glbs["initial_env_master-" + index] = "false";
            }
          } else {
              glbs["displayName-" + index] = "Redis Cluster " + (i + 1);
          }
        }
        glbs["envGroups"] = envGroups;
        glbs["regionsCount"] = regions.length;
        glbs["master_env_name"] = "${settings.envName}-1";
        return { result: 0, onAfterReturn: onAfterReturn };

  createEnvs:
  - script: |
      var regions = '${settings.regions}'.split(','), actions = [];
      var envGroups = eval('(' + MANIFEST + ')').envGroups;
      for (var cluster = 1, n = regions.length + 1; cluster < n; cluster ++) {
        actions.push({
          jps: "${baseUrl}/scripts/redis.jps?_r=${fn.random}",
          envName: "${settings.envName}-" + cluster,
          loggerName: "${settings.envName}-" + cluster,
          envGroups: "Database cluster ${settings.envName}",
          displayName: "${globals.displayName-" + cluster + "}",
          region: "${globals.region-" + cluster + "}",
          settings: {
            nodeType: "${settings.nodeType}",
            password: "${globals.password}",
            regions: "${settings.regions}",
            topology: "${settings.topology}",
            vpnAppid: "${globals.vpnAppid}",
            internalNetworkEnabled: "${settings.internalNetworkEnabled}",
            mainEnvName: "${settings.envName}"
          }
        });
      }
      return { result: 0, onAfterReturn: { 'marketplace.jps.install': actions } };

  installClusterLogic:
    - install: ${baseUrl}/addons/auto-cluster.yaml
      envName: ${settings.envName}-1
      settings:
        regions: ${settings.regions}
        mainEnvName: ${settings.envName}
        topology: ${settings.topology}
        masterAddress: ${globals.master_address_sqldb-1}
